{
    "collab_server" : "",
    "contents" : "---\ntitle: \"TTP 220_Project\"\nauthor: \"Mike Gaunt\"\ndate: \"April 21, 2019\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n```{r echo = FALSE, results='hide', message=FALSE, warning=FALSE}\n#library(pdftools) #reads pdf files\nlibrary(pacman)\nlibrary(quanteda)\nlibrary(ISLR)\n\nlibrary(SemNetCleaner) #singualarize words\nlibrary(stringi)\nlibrary(stringr) #used\nlibrary(tm)\nlibrary(tidytext) #Text mining\nlibrary(topicmodels) #for LDA \nlibrary(htmlwidgets)\nlibrary(openintro) #for case conversion\n\n\n#library(readr) #all purpose file reader\nlibrary(readxl) #required for xmls files\nlibrary(dplyr) #Data manipulation (also included in the tidyverse package)\nlibrary(plyr)\nlibrary(magrittr) #reorders fucntion calling\nlibrary(tidyr) #Spread, separate, unite, text mining (also included in the tidyverse package)\n# library(widyr) #Use for pairwise correlation\n\n#for viz\n# library(formattable)\nlibrary(grid)\nlibrary(gridExtra) #plot muliple grobs\nlibrary(ggplot2)\n# library(RColorBrewer) #makes own color palettes\n# library(naniar) #Shows missing data \n# library(waffle) #pie chart alternative\n\nlibrary(knitr) # for dynamic reporting\nlibrary(kableExtra) # create a nicely formated HTML table\nlibrary(formattable) # for the color_tile function\n```\n\n**Data Prep**\n```{r results='hide', message=FALSE, warning=FALSE}\n#2012-2016 data has been preprocessed out of 'R' for the sake of expediency \nav.2012 = read_xlsx(\"./Data/Av2012_2016.xlsx\", sheet = 1, col_names = FALSE)\nav.2013 = read_xlsx(\"./Data/Av2012_2016.xlsx\", sheet = 2, col_names = FALSE)\nav.2014 = read_xlsx(\"./Data/Av2012_2016.xlsx\", sheet = 3, col_names = FALSE)\nav.2015 = read_xlsx(\"./Data/Av2012_2016.xlsx\", sheet = 4, col_names = FALSE)\nav.2016 = read_xlsx(\"./Data/Av2012_2016.xlsx\", sheet = 5, col_names = FALSE)\n\nav.12.16 = rbind.data.frame(av.2012, av.2013, av.2014, av.2015, av.2016)\ncolnames(av.12.16) = c(\"state\", \"name\", \"text\", \"year\", \"status\")\n\n#changing variable data types\nav.12.16$state = as.factor(av.12.16$state)\nav.12.16$year = as.integer(av.12.16$year)\nav.12.16$status = as.factor(av.12.16$status)\nav.12.16$text = str_to_lower(av.12.16$text)\n```\n\n```{r results='hide', message=FALSE, warning=FALSE}\n#2017-2019 data requires in code processing \nyolo = readLines(\"./Data/Autonomous Vehicles State Bill Tracking Database_ALL STATES_2017 2019.txt\") \nyolo = tibble(text = yolo)\nyolo.df = as.data.frame(yolo)\n```\n\n```{r results='hide', message=FALSE, warning=FALSE}\n#preprocessing\nyolo.df$text = str_to_lower(yolo.df$text)\nyolo.df$text = gsub(\"\\f\", \"\", yolo.df$text)\n\n#chunk finds and deletes empty indexs\nempty.indexs = which(yolo.df$text == \"\")\nyolo.df = as.data.frame(yolo.df[-empty.indexs,], stringsAsFactors = FALSE)\ncolnames(yolo.df) = \"text\"\n```\n\n```{r}\n#uses external \"state\" name data \n#turns data into a df, gets abbreviations for states, and makes empty index row\nstates = as.data.frame(state.name)\nstates$abbr = tolower(state2abbr(state.name))\nstates$region = state.region\n\n#currently having issues with correctly classifying oregon abbrevaiton \"or\" vs the word \"or\"\nstates = states[-37,] \n```\n\n```{r}\n#tmp copy of states data with only first three charactors per line\n#this step makes it easier to predict true state bill names and indices\ntmp = substr(yolo.df$text, 0, 3)\n\nstate.indx = list(\"\")\n\n#loops over all states and searches for rows indices from and returns list of occurances\nfor(i in 1:nrow(states)) { \n  states$indx[i] = list(which(str_detect(tmp, paste(states[i,2], \"\"))))\n  state.indx[[i]] = list(which(str_detect(tmp, paste(states[i,2], \"\"))))\n}\n\n# indx = which(str_detect(substr(yolo.df$text, 0, 3), paste((state.abb), collapse = '|')))\n# yolo.df[indx,]\n\n#Removes states that don't have any legislation \nstate.indx = state.indx[lapply(state.indx, lengths) > 0 ]\n```\n\n```{r}\n#iterates over state indices list \n#i-loop creates temporary variable for a singular state's index list\n#j-loop iterates over length of a state's number of found indices\n#ifelse statement determines idexing pairs which is used to subset dataset into indicidual bill occurances.\nslice = c()\n\nfor (i in 1:length(state.indx)) { \n  tmp = state.indx[[i]]\n  \n    for (j in 1:(lengths(tmp))) {\n      \n      slice = c(slice, ifelse(j != lengths(tmp),\n                          list(tmp[[1]][[j]]:(tmp[[1]][[j+1]])),\n                          list(tmp[[1]][[j]]: (tmp[[1]][[j]]+16))))\n    }\n}\n\n#filters out long index pairs for \"oregon\" problem\n#however it still passes the shorter incorrect pairs \nslice = slice[lapply(slice, length) < 150 ]\n```\n\n```{r}\n#initializes dataframe to strore bill info\nav.17.19 = data.frame(state = \"\", name = \"\", text = \"\", year = \"\", status = \"\", stringsAsFactors = FALSE)\n\n#loop restructures data into tidy format\nfor (i in 1:length(slice)){\n  tmp = yolo.df[slice[[i]],]\n  sum.indx = which(str_detect(tmp, \"summary\"))\n  hist.indx = which(str_detect(tmp, \"history\"))\n  av.17.19[i,1] = abbr2state(substr(tmp[[1]], 0, 2))\n  av.17.19[i,2] = tmp[[1]]\n  av.17.19[i,3] = ifelse(sum.indx+1 == hist.indx, \n       substr(tmp[[which(str_detect(tmp, \"summary\"))]], 10, 400),  \n       paste(substr(tmp[[which(str_detect(tmp, \"summary\"))]], 10, 400), tmp[[hist.indx-1]]))\n  av.17.19[i,4] = tmp[[2]]\n  \n  if (str_detect(tmp[[4]], \"enacted\") == TRUE){\n    av.17.19[i,5] = \"Enacted\"\n  } else if (str_detect(tmp[[4]], \"failed\") == TRUE){\n    av.17.19[i,5] = \"Failed\"\n  } else if (str_detect(tmp[[4]], \"pending\") == TRUE){\n    av.17.19[i,5] = \"Pending\"\n  } else {\n    av.17.19[i,5] = \"N/A\"\n  }\n}\n#this code needs an if then statement to identify status of the bill.\n```\n\n```{r}\n#changing variable data types\nav.17.19$state = as.factor(av.17.19$state)\nav.17.19$year = as.integer(av.17.19$year)\nav.17.19$status = as.factor(av.17.19$status)\n```\n\nBillbody final form.\n```{r}\nbillbody = rbind.data.frame(av.12.16, av.17.19)\nbillbody$name = as.factor(paste(billbody$name, billbody$year) )\n```\n\n```{r}\n#function which takes commonly grouped words and puts them into a single word\ngrouped.werds = function(doc) {\n  doc = gsub(\"autonomous motor vehicles\", \"av\", doc)\n  doc = gsub(\"autonomous motor vehicle\", \"av\", doc)\n  doc = gsub(\"autonomous vehicles\", \"av\", doc)\n  doc = gsub(\"autonomous vehicle\", \"av\", doc)\n  doc = gsub(\"automated vehicles\", \"av\", doc)\n  doc = gsub(\"automated vehicle\", \"av\", doc)\n  doc = gsub(\"autonomous cars\", \"av\", doc)\n  doc = gsub(\"autonomous car\", \"av\", doc)\n  doc = gsub(\"automated and connected vehicles\", \"av\", doc)\n  doc = gsub(\"automated and connected vehicle\", \"av\", doc)\n  doc = gsub(\"connected vehicles\", \"av\", doc)\n  doc = gsub(\"connected vehicle\", \"av\", doc)\n  doc = gsub(\"automated motor vehicles\", \"av\", doc)\n  doc = gsub(\"automated motor vehicle\", \"av\", doc)\n  doc = gsub(\"selfdriving motor vehicles\", \"av\", doc)\n  doc = gsub(\"selfdriving motor vehicle\", \"av\", doc)\n  doc = gsub(\"selfdriving vehicles\", \"av\", doc)\n  doc = gsub(\"selfdriving vehicle\", \"av\", doc)\n  doc = gsub(\"driverless motor vehicles\", \"av\", doc)\n  doc = gsub(\"driverless motor vehicle\", \"av\", doc)\n  doc = gsub(\"driverless vehicles\", \"av\", doc)\n  doc = gsub(\"driverless vehicle\", \"av\", doc)\n  doc = gsub(\"unmanned motor vehicles\", \"av\", doc)\n  doc = gsub(\"unmanned motor vehicle\", \"av\", doc)\n  doc = gsub(\"avs\", \"av\", doc)\n  \n  #by authorities\n  doc = gsub(\"vehicle services division\", \"vehicleservicesdivision\", doc)\n  doc = gsub(\"vehicle services department\", \"vehicleservicesdepartment\", doc)\n  doc = gsub(\"vehicle services\", \"motorvehiclelicensingsystem\", doc)\n  doc = gsub(\"tax commission\", \"taxcommission\", doc)\n  doc = gsub(\"registry of motor vehicles\", \"registryofmotorvehicles\", doc)\n  doc = gsub(\"office of motor vehicles\", \"officeofmotorvehicles\", doc)\n  doc = gsub(\"motor vehicle licensing system\", \"motorvehiclelicensingsystem\", doc)\n  doc = gsub(\"motor vehicle licensing division\", \"motorvehiclelicensingdivision\", doc)\n  doc = gsub(\"motor vehicle division\", \"motorvehicledivision\", doc)\n  doc = gsub(\"motor vehicle commission\", \"motorvehiclecommission\", doc)\n  doc = gsub(\"motor vehicle bureau\", \"motorvehiclebureau\", doc)\n  doc = gsub(\"motor vehicle administration\", \"motorvehicleadministration\", doc)\n  doc = gsub(\"driver services program\", \"driverservicesprogram\", doc)\n  doc = gsub(\"driver services directorate\", \"driverservicesdirectorate\", doc)\n  doc = gsub(\"driver services department\", \"driverservicesdepartment\", doc)\n  doc = gsub(\"driver license services\", \"driverlicenseservices\", doc)\n  doc = gsub(\"driver license division\", \"driverlicensedivision\", doc)\n  doc = gsub(\"driver and vehicle services\", \"driverandvehicleservices\", doc)\n  doc = gsub(\"driver and motor vehicle services\", \"driverandmotorvehicleservices\", doc)\n  doc = gsub(\"division of vehicles\", \"divisionofvehicles\", doc)\n  doc = gsub(\"division of motor vehicles\", \"divisionofmotorvehicles\", doc)\n  doc = gsub(\"division of driver licensing\", \"divisionofdriverlicensing\", doc)\n  doc = gsub(\"department of state\", \"departmentofstate\", doc)\n  doc = gsub(\"department of revenue and taxation\", \"departmentofrevenueandtaxation\", doc)\n  doc = gsub(\"department of revenue\", \"departmentofrevenue\", doc)\n  doc = gsub(\"department of licensing\", \"departmentoflicensing\", doc)\n  doc = gsub(\"department of driver services\", \"departmentofdriverservices\", doc)\n  doc = gsub(\"bureau of motor vehicles\", \"bureauofmotorvehicles\", doc)\n  doc = gsub(\"department of vehicle\", \"dmv\", doc)\n  doc = gsub(\"department of highway safety and motor vehicles\", \"dmv\", doc)\n  \n  doc = gsub(\"department of transportation\", \"dot\", doc)\n  doc = gsub(\"transportation department\", \"dot\", doc)\n  doc = gsub(\"transit authority\", \" \", doc)\n  doc = gsub(\"department of safety\", \"dps\", doc)\n  doc = gsub(\"department of public safety\", \"dps\", doc)\n  doc = gsub(\"task force\", \"taskforce\", doc)\n  doc = gsub(\"highway patrol\", \"policeofficer\", doc)\n  doc = gsub(\"police officer\", \"policeofficer\", doc)\n  doc = gsub(\"peace officer\", \"policeofficer\", doc)\n  doc = gsub(\"law officer\", \"policeofficer\", doc)\n\n  #by license\n  doc = gsub(\"valid drivers license\", \"driverlicense\", doc)\n  doc = gsub(\"valid driver license\", \"driverlicense\", doc)\n  doc = gsub(\"drivers licenses\", \"driverlicense\", doc)\n  doc = gsub(\"drivers license\", \"driverlicense\", doc)\n  doc = gsub(\"driver licenses\", \"driverlicense\", doc)\n  doc = gsub(\"driver license\", \"driverlicense\", doc)\n  doc = gsub(\"licenses\", \"driverlicense\", doc)\n  doc = gsub(\"license\", \"driverlicense\", doc)\n  \n  doc = gsub(\"micro transit\", \"microtransit\", doc)\n  doc = gsub(\"mobility-as-a-service\", \"maas\", doc)\n  doc = gsub(\"mobility as a service\", \"maas\", doc)\n  doc = gsub(\"multi modal\", \"multimodal\", doc)\n  doc = gsub(\"multi-modal\", \"multimodal\", doc)\n  doc = gsub(\"traffic control\", \"trafficcontrol\", doc)\n  \n  #by technology \n  doc = gsub(\"motor vehicles\", \"vehicle\", doc)\n  doc = gsub(\"motor vehicle\", \"vehicle\", doc)\n  \n  doc = gsub(\"pilot project\", \"pilotproject\", doc)\n  doc = gsub(\"platooning\", \"platoon\", doc)\n  doc = gsub(\"platoons\", \"platoon\", doc)\n  \n  doc = gsub(\"automated driving system\", \"ads\", doc)\n  doc = gsub(\"automated driving systems\", \"ads\", doc)\n  \n  doc = gsub(\"automated braking system\", \"abs\", doc)\n  doc = gsub(\"automated braking systems\", \"abs\", doc)\n  \n  doc = gsub(\"automated technology\", \"avtech\", doc)\n  doc = gsub(\"autonomous technology\", \"avtech\", doc)\n  doc = gsub(\"automated system\", \"avtech\", doc)\n  doc = gsub(\"autonomous system\", \"avtech\", doc)\n  doc = gsub(\"communication devices\", \"communicationdevices\", doc)\n\n  return(doc)\n}\n```\n\n```{r}\nremove.werds = function(doc) {\n  doc = gsub(\"relates\", \"\", doc)\n  doc = gsub(\"defines\", \"\", doc)\n  doc = gsub(\"creates\", \"\", doc)\n  return(doc)\n}\n```\n\n```{r}\n#more preprocessing of the text\nbillbody$text = billbody$text %>%\n  str_replace_all(\"[[:punct:]]\", \"\") %>% str_replace_all(\"[[:digit:]]\", \"\")\n```\n\n```{r}\nbillbody$text = grouped.werds(billbody$text)\nbillbody$text = remove.werds(billbody$text)\n```\n\n```{r}\ntmp = which(billbody$state == \"Mayland\")\nbillbody$state[tmp] = \"Maryland\"\n```\n\n\n```{r}\nbillbody.filtered = billbody %>%\n  unnest_tokens(word, text) %>%\n  anti_join(stop_words)\n\nbillbody.filtered$word = singularize(billbody.filtered$word)\n```\n\n```{r}\n#making a DTM by hand\nbillbody.filtered.DTM = billbody.filtered %>%\n  group_by(name) %>%\n  count() %>%\n  ungroup()\n```\n\n**ANALYSIS**\nGeneral Descriptives\nCummlative Totals (all)\n```{r}\n#cummlative description of all proposed bills by state\ntmp.1 = billbody %>%\n  select(year) %>%\n  group_by(year) %>%\n  count() %>% ungroup() %>%\n  mutate(cum.sum = cumsum(freq)) \n\ntmp.2 = billbody %>%\n  filter(status == \"Enacted\") %>%\n  select(year) %>%\n  group_by(year) %>%\n  count() %>% ungroup() %>%\n  mutate(cum.sum = cumsum(freq)) \n\nggplot() +\n    geom_point(data = tmp.1, aes(year, cum.sum), color = \"blue\") +\n    geom_line(data = tmp.1,aes(year, cum.sum), color = \"blue\") +\n    geom_area(data = tmp.1,aes(year, cum.sum),fill = \"blue\", alpha = .2) +\n    geom_text(data = tmp.1,aes(year, cum.sum,label = cum.sum),  nudge_y = 25) +\n    geom_point(data = tmp.2, aes(year, cum.sum), color = \"dark red\") +\n    geom_line(data = tmp.2,aes(year, cum.sum), color = \"dark red\") +\n    geom_area(data = tmp.2,aes(year, cum.sum),fill = \"red\", alpha = .5) +\n    labs(x = \"Year\", y = \"Count\", title = \"Number of proposed AV bills (cummulative)\", caption = \"Data courtesy of National Conference of State Legislatures\", subtitle = \"Proposed (Blue), Enacted (Red)\" ) +\n    theme_classic()\n```\n\n```{r}\n#cummlative description of all proposed bills by state\ntmp = billbody %>%\n  select(state, year) %>%\n  group_by(state, year) %>%\n  count() %>% ungroup() \n\ntmp$cum.sum = as.numeric(unlist(tapply(tmp$freq, tmp$state, cumsum)))\n\ntmp.3 = aggregate(tmp$freq, by = list(tmp$state), FUN = sum)  %>%\n  arrange(desc(x)) %>%\n  top_n(10)\n\nggplot(tmp) +\n  geom_line(aes(year, cum.sum, color = state)) +\n  geom_point(aes(year, cum.sum, color = state)) + \n  theme_classic()\n```\n\nCummlative Totals (enacted)\n```{r}\n#summlative description of all enacted bills by state\ntmp.1 = billbody %>%\n  filter(status == \"Enacted\") %>%\n  select(state, year) %>%\n  group_by(state, year) %>%\n  count() %>% \n  ungroup() \n\ntmp.1$cum.sum = as.numeric(unlist(tapply(tmp.1$freq, tmp.1$state, cumsum)))\n\ntmp.2 = aggregate(tmp.1$cum.sum, by = list(tmp.1$state), max) %>%\n  arrange(desc(x)) %>%\n  top_n(10) %>%\n  set_colnames(c(\"state\", \"Count\"))\n\nggplot(right_join(tmp.1, tmp.2))+\n  geom_line(aes(year, cum.sum, color = state, linetype = state)) +\n  geom_point(aes(year, cum.sum, color = state)) + \n  ylim(0,12) +\n  labs(x = \"Year\", y = \"Count\", title = \"Top 10 active state legislatures enacting policies\", caption = \"Data courtesy of National Conference of State Legislatures\", color = \"State\", linetype = \"State\") +\n    theme_classic()\n```\n\n```{r}\ncbind.data.frame(tmp.3, tmp.2) %>%\n  set_colnames(c(\"Proposed\", \"Count\", \"Enacted\", \"Count\")) %>%\n  kable() %>%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"), full_width = F)\n\n```\n\nTop 5 words for all states relative to word count\n```{r,  fig.width = 6}\ntmp.1 = billbody.filtered %>% \n  filter(state == \"California\") %>%\n  select(state, word) %>%\n  group_by(state) %>%\n  count() %>% \n  ungroup() %>%\n  filter(word != \"av\" & word != \"vehicle\" & word != \"matter\" & word != \"related\" & word != \"definition\" & word != \"clas\" ) %>%\n  group_by(state) %>%\n  filter(freq >2) %>%\n  top_n(10) %>% \n  ungroup()\n\ntmp.2 = billbody.filtered %>% \n  filter(state == \"Georgia\") %>%\n  select(state, word) %>%\n  group_by(state) %>%\n  count() %>% \n  ungroup() %>%\n  filter(word != \"av\" & word != \"vehicle\" & word != \"matter\" & word != \"related\" & word != \"definition\" & word != \"clas\" ) %>%\n  group_by(state) %>%\n  filter(freq >2) %>%\n  top_n(10) %>% \n  ungroup()\n\ntmp.3 = billbody.filtered %>% \n  filter(state == \"New Jersey\") %>%\n  select(state, word) %>%\n  group_by(state) %>%\n  count() %>% \n  ungroup() %>%\n  filter(word != \"av\" & word != \"vehicle\" & word != \"matter\" & word != \"related\" & word != \"establish\" & word != \"existing\") %>%\n  group_by(state) %>%\n  filter(freq >2) %>%\n  top_n(10) %>% \n  ungroup()\n\nggplot(tmp.1) +\n  geom_bar(aes(x = reorder(word, freq), y = freq), stat=\"identity\", fill = \"light blue\", color = \"black\") +\n  labs(y = \"Occurance Count\", x = \"\", title = \"California\") +\n  theme_classic() +\n  coord_flip()\n\nggplot(tmp.2) +\n  geom_bar(aes(x = reorder(word, freq), y = freq), stat=\"identity\", fill = \"light blue\", color = \"black\") +\n  labs(y = \"Occurance Count\", x = \"\", title = \"Georgia\") +\n  theme_classic() +\n  coord_flip()\n\nggplot(tmp.3) +\n  geom_bar(aes(x = reorder(word, freq), y = freq), stat=\"identity\", fill = \"light blue\", color = \"black\") +\n  labs(y = \"Occurance Count\", x = \"\", title = \"New Jersey\") +\n  theme_classic() +\n  coord_flip()\n\n```\n\nTopic Analysis \n```{r}\nclr.8 = c( \"#78c679\", \"#edf8b1\", \"#c7e9b4\", \"#7fcdbb\",\"#41b6c4\", \"#1d91c0\", \"#225ea8\",\"#0c2c84\")\n\ntopics = read_xlsx(\"./Data/TTP220_Project.xlsx\", sheet = 1, col_names = TRUE)\ncolnames(topics)\n```\n\n```{r}\n#checks for hand-made topics \ntotals = billbody.filtered.DTM %>%\n  mutate(testing = freq*ifelse((billbody.filtered.DTM$word %in% topics$testing),1,0)) %>%\n  mutate(safety = freq*ifelse((billbody.filtered.DTM$word %in% topics$safety),1,0)) %>%\n  mutate(operation = freq*ifelse((billbody.filtered.DTM$word %in% topics$operation),1,0)) %>%\n  mutate(authorities = freq*ifelse((billbody.filtered.DTM$word %in% topics$authorities),1,0)) %>%\n  mutate(permission = freq*ifelse((billbody.filtered.DTM$word %in% topics$permission),1,0)) %>%\n  mutate(infrastructure = freq*ifelse((billbody.filtered.DTM$word %in% topics$infrastructure),1,0)) %>%\n  mutate(social = freq*ifelse((billbody.filtered.DTM$word %in% topics$social),1,0)) %>%\n  mutate(financial = freq*ifelse((billbody.filtered.DTM$word %in% topics$financial),1,0)) \n```\n\n```{r}\n#sums topic totals per bill\ntotals = aggregate(totals[,c(7:length(totals))], by = list(totals$name), sum)\n\ncolnames(totals)[1] = \"name\"\ntotals = totals %>% \n  left_join(billbody[,-3] )\n```\n\n```{r}\n#what are states concernded with?\ntmp = totals \n\n#by status\naggregate(tmp[,c(2:9)], by = list(tmp$status), FUN = sum)\n\n#by year\ntmp = aggregate(tmp[,c(2:9)], by = list(tmp$year), FUN = sum) \n\nfor (i in 1:nrow(tmp)){\n  tmp[i,-1] = round(tmp[i,-1] / (billbody %>% filter(year == tmp[i,1]) %>% nrow()), 5)\n}\n\ntmp %>%\n  gather(\"Topic\", \"Counts\", 2:9) %>%\n  ggplot() +\n    geom_line(aes(Group.1,Counts, color = Topic), size = 1) +\n    geom_point(aes(Group.1,Counts, color = Topic)) +\n    scale_color_manual(values = (clr.8)) +\n    theme_classic() +\n    labs(title = \"What are states concerned with?\", x = \"Years\", y = \"Counts (adjusted)\")\n```\n\n```{r}\n#what are states concernded with?\n#Corrected for number of bills per year \ntmp.1 = totals \n\n#by status\n# aggregate(tmp[,c(2:9)], by = list(tmp$status), FUN = sum)\n\n#by year\ntmp.1 = aggregate(tmp.1[,c(2:9)], by = list(tmp.1$year), FUN = sum) \n\ntmp.1 =  tmp.1 %>%\n  mutate(ttl = billbody %>% \n  select(year) %>%\n  group_by(year) %>%\n  count() %>%\n  select(freq)) \n\ntmp.1 = tmp.1 %>%\n  mutate(cum.sum = cumsum(tmp.1$ttl$freq)) %>%\n  mutate(cum.sum.adj = cum.sum/(max(cum.sum)/2))\n\nfor (i in 1:length(tmp.1[,c(2:9)])){\n  tmp.1[,(i+1)] = tmp.1[,(i+1)]/tmp.1$ttl$freq\n}\n\ntmp.1 %>%\n  gather(\"Topic\", \"Counts\", 2:9) %>%\n  ggplot() +\n    geom_line(aes(Group.1,Counts, color = Topic), size = 1.25) +\n    geom_point(aes(Group.1,Counts, color = Topic)) +\n    geom_area(data = tmp.1, aes(Group.1, cum.sum.adj), alpha = .05) +\n    geom_line(data = tmp.1, aes(Group.1, cum.sum.adj), alpha = .3) +\n    theme_classic() +\n    labs(title = \"What are states priorities?\", x = \"Years\", y = \"Counts per proposed document\")\n```\n\nPosiitios of AUuthorit\n```{r}\ntmp = billbody.filtered.DTM[which(billbody.filtered.DTM$word %in% topics$authorities),] \naggregate(tmp$freq, by = list(tmp$state, tmp$word), FUN = sum) %>%\n  arrange(Group.1, Group.2) %>%\n  group_by(Group.1, Group.2) %>%\n  count() %>%\n  ggplot() +\n    geom_bar(aes(x = reorder(Group.1, x), y = x, fill = Group.2), stat=\"identity\", color = \"black\") +\n    scale_fill_manual(values = (clr.8)) +\n    labs(x = \"Occurance Count\", y = \"States\", fill = \"Detected Refernces \\n to Authority\", title = \"Who regulates AVs?\") +\n    theme_classic() +\n    coord_flip()\n\naggregate(tmp$freq, by = list(tmp$word), FUN = sum) %>%\n  arrange(desc(x)) %>%\n  ggplot() +\n    geom_bar(aes(x = reorder(Group.1, x), y = x), stat=\"identity\", fill = clr.8[4], color = \"black\") +\n    labs(y = \"Occurance Count\", x = \"\", title = \"Common references to authority\") +\n    theme_classic() +\n    coord_flip()\n```\n\n```{r}\ntmp = billbody.filtered.DTM[which(billbody.filtered.DTM$word %in% c(\"dot\", \"dmv\", \"dps\", \"commision\", \"taskforce\")),]\n\naggregate(tmp$freq, by = list(tmp$state, tmp$word), FUN = sum) %>%\n  arrange(Group.1, Group.2) %>%\n  group_by(Group.1, Group.2) %>%\n  count() %>%\n  ggplot() +\n    geom_bar(aes(Group.1, weight = x, fill = Group.2)) +\n    scale_fill_manual(values = (clr.8)) +\n   theme_classic() +\n   coord_flip()\n```\n\n```{r}\n#what is florida and Califronia concerned with?\ntmp = totals %>%\n  filter(state == \"Georgia\" | state == \"California\" | state == \"New Jersey\")  \n\n#state totals\naggregate(tmp[,c(2:9)], by = list(tmp$state), FUN = sum) %>%\n  set_colnames(c(\"\",str_to_title(colnames(topics)))) %>%\n  kable() %>%\n  kable_styling(bootstrap_options = \"striped\", full_width = F)\n\n#by status\naggregate(tmp[,c(2:9)], by = list(tmp$state, tmp$status), FUN = sum) %>%\n  set_colnames(c(\"\",\"\",str_to_title(colnames(topics)))) %>%\n  kable() %>%\n  kable_styling(bootstrap_options = \"striped\", full_width = F)\n\n#by year\ntmp = aggregate(tmp[,c(2:9)], by = list(tmp$state, tmp$year), FUN = sum) \n\ntmp %>%\n  set_colnames(c(\"\",\"\",str_to_title(colnames(topics)))) %>%\n  kable() %>%\n  kable_styling(bootstrap_options = \"striped\", full_width = F)\n\ntmp = tmp %>%\n  gather(\"Topic\", \"Counts\", 3:10) %>% \n   arrange(Topic, Group.1, Group.2)  \n  # group_by(Group.1, Topic) %>%\n  # mutate(cum.sum = cumsum(Counts)).1.1[]\ntmp.1 = tmp[(tmp$Group.1 == \"California\"),]\ntmp.1$cum.sum = as.numeric(unlist(tapply(tmp.1$Counts, tmp.1$Topic, cumsum)))\n\ntmp.2 = tmp[(tmp$Group.1 == \"Georgia\"),]\ntmp.2$cum.sum = as.numeric(unlist(tapply(tmp.2$Counts, tmp.2$Topic, cumsum)))\n\ntmp.3 = tmp[(tmp$Group.1 == \"New Jersey\"),]\ntmp.3$cum.sum = as.numeric(unlist(tapply(tmp.3$Counts, tmp.3$Topic, cumsum)))\n\nrbind(tmp.1, tmp.2, tmp.3) %>%\n  ggplot() +\n    geom_line(aes(Group.2,cum.sum, color = Topic)) +\n    geom_point(aes(Group.2,cum.sum, color = Topic)) +\n    facet_grid(cols = vars(Group.1)) +\n    theme_classic() +\n    labs(title = \"What are states priorities?\", x = \"Years\", y = \"Cummlative Counts\")\n```\n\n```{r}\nbillbody.filtered.enacted = billbody.filtered %>%\n  filter(status == \"Enacted\")\n\nbillbody.filtered.failed = billbody.filtered %>%\n  filter(status == \"Failed\")\n```\n\n```{r}\n#top 25 words total \nbillbody.filtered.enacted %>%\n  mutate(word = as.factor(word)) %>%\n  select(word) %>%\n  count() %>% \n  arrange(desc(freq))%>%\n  head(25)\n\nbillbody.filtered.failed %>%\n  mutate(word = as.factor(word)) %>%\n  select(word) %>%\n  count() %>% \n  arrange(desc(freq))%>%\n  head(25)\n```\n\n```{r}\n#Actualy enacted legislation \nbillbody.filtered.enacted %>%\n  filter(word == c(\"dot\", \"dmv\"))\n```\n\n88888888888888888888888888888888888\n#gives top 25 words in california\nbillbody.filtered %>%\n  mutate(word = as.factor(word)) %>%\n  select(state, word) %>%\n  group_by(state) %>%\n  count() %>% ungroup() %>%\n  filter(state == \"California\") %>%\n  arrange(desc(freq)) %>%\n  head(10) #%>%\n  # ggplot() +\n  #   geom_bar(aes(as.factor(word), weight = freq)) \n\nbillbody.filtered %>%\n  filter(status == \"enacted\") %>%\n  mutate(word = as.factor(word)) %>%\n  select(state, word) %>%\n  group_by(state) %>%\n  count() %>% ungroup() %>%\n  filter(state == \"California\") %>%\n  arrange(desc(freq)) %>%\n  head(10) \n\nbillbody.filtered %>%\n  filter(status == \"failed\") %>%\n  mutate(word = as.factor(word)) %>%\n  select(state, word) %>%\n  group_by(state) %>%\n  count() %>% ungroup() %>%\n  filter(state == \"California\") %>%\n  arrange(desc(freq)) %>%\n  head(10)\n\nbillbody.filtered %>%\n  filter(state == \"California\") %>%\n  filter(word == \"testing\")\n88888888888888888888888888888888888\n\nAutoVe_Intro_2012_leg\n\n\nav.2012 = readLines(\"./Data/AutoVe_Intro_2012_leg.txt\") \nav.2012 = tibble(text = av.2012)\nav.2012 = as.data.frame(av.2012)\n\nav.2013 = readLines(\"./Data/AutoVe_Intro_2013_leg.txt\")\nav.2013 = tibble(text = av.2013)\nav.2013 = as.data.frame(av.2013)\n\nav.2014 = readLines(\"./Data/AutoVe_Intro_2014_leg.txt\") \nav.2014 = tibble(text = av.2014)\nav.2014 = as.data.frame(av.2014)\n\nav.2015 = readLines(\"./Data/AutoVe_Intro_2015_leg.txt\") \nav.2015 = tibble(text = av.2015)\nav.2015 = as.data.frame(av.2015)\n\nav.2016 = readLines(\"./Data/AutoVe_Intro_2016_leg.txt\") \nav.2016 = tibble(text = av.2016)\nav.2016 = as.data.frame(av.2016)\n\n\n#use below code to check for specific words\nbillbody[which(str_detect(billbody$text, \"wireless communications devices\")),]\n\n#line below is a really powerful technique to see if a line of text contains any specicified input\nindx = which(str_detect(av.2015$text, paste(state.abb, collapse = '|')))\nav.2015[indx,]\n88888888888888888888888888888888888\n\n\n88888888888888888888888888888888888\n\n######trying to get to a document term matix here\nwerrrds = paste(stop_words$word, collapse = '|')\n\nbillbody \ngsub(paste(\"the | of | to\", collapse = '|'),\"\", billbody$text)\ngsub(werrrds,\"\", billbody$text)\n\nhomie = billbody\nhomie$text = gsub(\"the | of | to | in | this | or |on|an|be| a |as |and| for|defines|is|that|into\",\"\", homie$text)\n88888888888888888888888888888888888\n\n88888888888888888888888888888888888\n\nhomie = homie %>%\n  select(name, text) %>%\n  corpus() %>%\n  dfm() %>%\n  LDA(k = 6, control = list(seed = 1234))\n\ntidy(homie, matrix = \"beta\") %>%\n  group_by(topic) %>%\n  top_n(10, beta) %>%\n  ungroup() %>%\n  arrange(topic, -beta) %>%\n  mutate(term = reorder(term, beta)) %>%\n  ggplot(aes(term, beta, fill = factor(topic))) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ topic, scales = \"free\") +\n  coord_flip()\n88888888888888888888888888888888888\n\n\n88888888888888888888888888888888888\n\n#was trying to tokenize by sentence\n#makes it difficult to remove words from a sentence \n#if i did this again i would :\n#keep punctuation \n#split/tokenize on periods or orther snetence ending punctutation \n#each row would have a state, year, name of bill, sentence number in bill varibales\n#then toeknize words\n\n\nbillbody %>%\n  unnest_tokens(word, text) %>%\n  anti_join(stop_words)  %>%\n  nest(word) \n\njhhhh$text = as.character(jhhhh$data)\njhhhh$text = unlist(jhhhh$text)\n\njhhhh$text = paste(jhhhh$text, collapse=' ' )\n\njhhhh$data\n?nest()\n\nbillbody %>%\n  unnest_tokens(sentence, text, token = \"sentences\") %>%\n  anti_join(stop_words) \n88888888888888888888888888888888888\n\n\n88888888888888888888888888888888888\n#sentiment analysis \nbillbody.filtered.DTM %>%\n  left_join(get_sentiments(\"bing\")) %>%\n  arrange(name)\n\n#still havent figured out the correct way to do it\n\nloughran\nbillbody.filtered %>%\n  distinct() %>%\n  merge(x = ., y = get_sentiments(\"bing\"), by=\"word\",all.x=TRUE) %>% \n  arrange(year, state, name) \n\n\n(billbody.filtered$word) %>%\n  unique() %>%\n  sort()\n88888888888888888888888888888888888\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1558547235828.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3121984638",
    "id" : "CE047B97",
    "lastKnownWriteTime" : 1558148644,
    "last_content_update" : 1558572706145,
    "path" : "~/10 Course Work/10 Spring 2019/TTP 220/Project/TTP 220_Project.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}